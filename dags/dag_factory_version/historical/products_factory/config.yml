registry_dim_part:
  default_args:
    owner: 'v.folin@reply.it'
    start_date: 2023-12-20
    retries: 1
    retry_delay_sec: 60
  schedule_interval: None
  dagrun_timeout_sec: 3600
  description: "To materialize historicized products' dimension table"
  tasks:
    dbt_snapshot_part:
      operator: airflow_dbt.operators.dbt_operator.DbtSnapshotOperator
      models: 'snapshot_part'
    check_registry_stg_part_initialization:
      operator: airflow.providers.snowflake.operators.snowflake.SnowflakeCheckOperator
      sql: |
        SELECT ROW_COUNT
        FROM ANALYTICS.INFORMATION_SCHEMA.TABLES
        WHERE  table_schema = 'DBT_CORE_REUSABLE_DEMO'
        AND    table_name   = 'REGISTRY_STG_PART'
      retries: 0
    branch_on_registry_stg_part_initialization:
      operator: airflow.operators.python.BranchPythonOperator
      python_callable_file: /home/airflow/gcs/dags/dag_factory_version/historical/products_factory/utils.py
      python_callable_name: branch_func_on_registry_stg_part_initialization
      provide_context: True
      trigger_rule: 'all_done'
      dependencies: [ dbt_snapshot_part, check_registry_stg_part_initialization ]
    dbt_run_registry_stg_part:
      operator: airflow_dbt.operators.dbt_operator.DbtRunOperator
      models: 'registry_stg_part'
      dependencies: [ branch_on_registry_stg_part_initialization ]
    dbt_run_registry_stg_part_full_refresh:
      operator: airflow_dbt.operators.dbt_operator.DbtRunOperator
      models: 'registry_stg_part'
      full_refresh: True
      dependencies: [ branch_on_registry_stg_part_initialization ]
    dbt_test_registry_stg_part:
      operator: airflow_dbt.operators.dbt_operator.DbtTestOperator
      models: 'registry_stg_part'
      trigger_rule: 'all_done'
      dependencies: [ dbt_run_registry_stg_part, dbt_run_registry_stg_part_full_refresh ]
    dbt_run_registry_dim_part:
      operator: airflow_dbt.operators.dbt_operator.DbtRunOperator
      models: 'registry_dim_part'
      trigger_rule: 'none_failed'
      dependencies: [ dbt_test_registry_stg_part ]
    dbt_test_registry_dim_part:
      operator: airflow_dbt.operators.dbt_operator.DbtTestOperator
      models: 'registry_dim_part'
      dependencies: [ dbt_run_registry_dim_part ]
registry_fct_inventory:
  default_args:
    owner: 'v.folin@reply.it'
    start_date: 2023-12-20
    retries: 1
    retry_delay_sec: 60
  schedule_interval: None
  dagrun_timeout_sec: 3600
  description: "To materialize historicized inventory' fact table"
  tasks:
    dbt_snapshot_partsupp:
      operator: airflow_dbt.operators.dbt_operator.DbtSnapshotOperator
      models: 'snapshot_partsupp'
    check_registry_stg_partsupp_initialization:
      operator: airflow.providers.snowflake.operators.snowflake.SnowflakeCheckOperator
      sql: |
        SELECT ROW_COUNT
        FROM ANALYTICS.INFORMATION_SCHEMA.TABLES
        WHERE  table_schema = 'DBT_CORE_REUSABLE_DEMO'
        AND    table_name   = 'REGISTRY_STG_PARTSUPP'
      retries: 0
    branch_on_registry_stg_partsupp_initialization:
      operator: airflow.operators.python.BranchPythonOperator
      python_callable_file: /home/airflow/gcs/dags/dag_factory_version/historical/products_factory/utils.py
      python_callable_name: branch_func_on_registry_stg_partsupp_initialization
      provide_context: True
      trigger_rule: 'all_done'
      dependencies: [ dbt_snapshot_partsupp, check_registry_stg_partsupp_initialization ]
    dbt_run_registry_stg_partsupp:
      operator: airflow_dbt.operators.dbt_operator.DbtRunOperator
      models: 'registry_stg_partsupp'
      dependencies: [ branch_on_registry_stg_partsupp_initialization ]
    dbt_run_registry_stg_partsupp_full_refresh:
      operator: airflow_dbt.operators.dbt_operator.DbtRunOperator
      models: 'registry_stg_partsupp'
      full_refresh: True
      dependencies: [ branch_on_registry_stg_partsupp_initialization ]
    dbt_test_registry_stg_partsupp:
      operator: airflow_dbt.operators.dbt_operator.DbtTestOperator
      models: 'registry_stg_partsupp'
      trigger_rule: 'all_done'
      dependencies: [ dbt_run_registry_stg_partsupp, dbt_run_registry_stg_partsupp_full_refresh ]
    trigger_part_dag:
      operator: airflow.operators.trigger_dagrun.TriggerDagRunOperator
      trigger_dag_id: 'registry_dim_part'
      wait_for_completion: True
      deferrable: True
      failed_states: [ 'failed' ]
    dbt_run_registry_fct_inventory:
      operator: airflow_dbt.operators.dbt_operator.DbtRunOperator
      models: 'registry_fct_inventory'
      trigger_rule: 'none_failed'
      dependencies: [ dbt_test_registry_stg_partsupp, trigger_part_dag ]
    dbt_test_registry_fct_inventory:
      operator: airflow_dbt.operators.dbt_operator.DbtTestOperator
      models: 'registry_fct_inventory'
      dependencies: [ dbt_run_registry_fct_inventory ]