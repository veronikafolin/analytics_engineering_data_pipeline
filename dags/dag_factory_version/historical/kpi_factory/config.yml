kpi_sales:
  default_args:
    owner: 'v.folin@reply.it'
    email: ['v.folin@reply.it']
    email_on_failure: True
    start_date: 2023-12-28
    retries: 0
    snowflake_conn_id: snowflake
  schedule_interval: None
  dagrun_timeout_sec: 3600
  description: "To compute and check KPIs on sales"
  params:
    groupBy: [ ]
    filters: [ ]
    partitionByDate: CURRENT_DATE()
  render_template_as_native_obj: True
  tasks:
    compute_supplier_lead_time:
      operator: airflow_dbt.operators.dbt_operator.DbtRunOperator
      models: 'kpi_supplier_lead_time'
      vars: { 'groupBy': "{{ params.groupBy }}", 'filters': "{{ params.filters }}", 'partitionByDate': "{{ params.partitionByDate }}" }
    check_supplier_lead_time:
      operator: airflow.providers.snowflake.operators.snowflake.SnowflakeCheckOperator
      sql: |
            SELECT NOT EXISTS (
              SELECT *
              FROM ANALYTICS.ANALYTICS_ENGINEERING_DATA_PIPELINE.KPI_SUPPLIER_LEAD_TIME
              WHERE AVG_DELIVERY_DAYS > 16 );
      dependencies: [ compute_supplier_lead_time ]
    compute_product_popularity:
      operator: airflow_dbt.operators.dbt_operator.DbtRunOperator
      models: 'kpi_product_popularity'
      vars: { 'groupBy': "{{ params.groupBy }}", 'filters': "{{ params.filters }}", 'partitionByDate': "{{ params.partitionByDate }}" }
      trigger_rule: 'all_done'
      dependencies: [ compute_supplier_lead_time ]
    compute_sales_return_rate:
      operator: airflow_dbt.operators.dbt_operator.DbtRunOperator
      models: 'kpi_sales_return_rate'
      vars: { 'groupBy': "{{ params.groupBy }}", 'filters': "{{ params.filters }}", 'partitionByDate': "{{ params.partitionByDate }}" }
      trigger_rule: 'all_done'
      dependencies: [ compute_product_popularity ]
    check_sales_return_rate:
      operator: airflow.providers.snowflake.operators.snowflake.SnowflakeCheckOperator
      sql: |
        SELECT NOT EXISTS (
          SELECT *
          FROM ANALYTICS.ANALYTICS_ENGINEERING_DATA_PIPELINE.KPI_SALES_RETURN_RATE
          WHERE SALES_RETURN_RATE > 25 );
      dependencies: [ compute_sales_return_rate ]
    compute_sales_fulfillment_time:
      operator: airflow_dbt.operators.dbt_operator.DbtRunOperator
      models: 'kpi_sales_fulfillment_time'
      vars: { 'groupBy': "{{ params.groupBy }}", 'filters': "{{ params.filters }}", 'partitionByDate': "{{ params.partitionByDate }}" }
      trigger_rule: 'all_done'
      dependencies: [ compute_sales_return_rate ]
    check_sales_fulfillment_time:
      operator: airflow.providers.snowflake.operators.snowflake.SnowflakeCheckOperator
      sql: |
        SELECT NOT EXISTS (
          SELECT *
          FROM ANALYTICS.ANALYTICS_ENGINEERING_DATA_PIPELINE.KPI_SALES_FULFILLMENT_TIME
          WHERE AVG_FULFILLMENT_DAYS > 80 );
      dependencies: [ compute_sales_fulfillment_time ]
    compute_gross_profit_margin:
      operator: airflow_dbt.operators.dbt_operator.DbtRunOperator
      models: 'kpi_gross_profit_margin'
      vars: { 'groupBy': "{{ params.groupBy }}", 'filters': "{{ params.filters }}", 'partitionByDate': "{{ params.partitionByDate }}" }
      trigger_rule: 'all_done'
      dependencies: [ compute_sales_fulfillment_time ]
    check_gross_profit_margin:
      operator: airflow.providers.snowflake.operators.snowflake.SnowflakeCheckOperator
      sql: |
        SELECT NOT EXISTS (
          SELECT *
          FROM ANALYTICS.ANALYTICS_ENGINEERING_DATA_PIPELINE.KPI_GROSS_PROFIT_MARGIN
          WHERE PROFIT < (NET_REVENUE*0.1));
      dependencies: [ compute_gross_profit_margin ]
kpi_orders:
  default_args:
    owner: 'v.folin@reply.it'
    email: [ 'v.folin@reply.it' ]
    email_on_failure: True
    start_date: 2023-12-28
    retries: 0
    snowflake_conn_id: snowflake
  schedule_interval: None
  dagrun_timeout_sec: 3600
  description: "To compute and check KPIs on orders"
  params:
    groupBy: [ ]
    filters: [ ]
    partitionByDate: CURRENT_DATE()
  render_template_as_native_obj: True
  tasks:
    compute_order_accuracy_rate:
      operator: airflow_dbt.operators.dbt_operator.DbtRunOperator
      models: 'kpi_order_accuracy_rate'
      vars: { 'groupBy': "{{ params.groupBy }}", 'filters': "{{ params.filters }}", 'partitionByDate': "{{ params.partitionByDate }}" }
    check_order_accuracy_rate:
      operator: airflow.providers.snowflake.operators.snowflake.SnowflakeCheckOperator
      sql: |
        SELECT NOT EXISTS (
          SELECT *
          FROM ANALYTICS.ANALYTICS_ENGINEERING_DATA_PIPELINE.KPI_ORDER_ACCURACY_RATE
          WHERE ORDER_ACCURACY_RATE > 40 );
      dependencies: [ compute_order_accuracy_rate ]
kpi_customers:
  default_args:
    owner: 'v.folin@reply.it'
    email: [ 'v.folin@reply.it' ]
    email_on_failure: True
    start_date: 2023-12-28
    retries: 0
    snowflake_conn_id: snowflake
  schedule_interval: None
  dagrun_timeout_sec: 3600
  description: "To compute and check KPIs on customers"
  params:
    groupBy: [ ]
    filters: [ ]
    startPeriod: '1994-01-01'
    endPeriod: '1994-12-31'
    partitionByDate: CURRENT_DATE()
  render_template_as_native_obj: True
  tasks:
    compute_customer_segmentation:
      operator: airflow_dbt.operators.dbt_operator.DbtRunOperator
      models: 'kpi_customer_segmentation'
      vars: { 'groupBy': "{{ params.groupBy }}", 'filters': "{{ params.filters }}", 'partitionByDate': "{{ params.partitionByDate }}" }
    compute_customer_retention_rate:
      operator: airflow_dbt.operators.dbt_operator.DbtRunOperator
      models: 'kpi_customer_retention_rate'
      vars: { 'groupBy': "{{ params.groupBy }}", 'filters': "{{ params.filters }}", 'partitionByDate': "{{ params.partitionByDate }}",
          'startPeriod': "{{ params.startPeriod }}", 'endPeriod': "{{ params.endPeriod }}"}
      trigger_rule: 'all_done'
      dependencies: [ compute_customer_segmentation ]
    check_customer_retention_rate:
      operator: airflow.providers.snowflake.operators.snowflake.SnowflakeCheckOperator
      sql: |
        SELECT NOT EXISTS (
          SELECT *
          FROM ANALYTICS.ANALYTICS_ENGINEERING_DATA_PIPELINE.KPI_CUSTOMER_RETENTION_RATE
          WHERE CUSTOMER_RETENTION_RATE < 50 );
      dependencies: [ compute_customer_retention_rate ]
    compute_customer_churn_rate:
      operator: airflow_dbt.operators.dbt_operator.DbtRunOperator
      models: 'kpi_customer_churn_rate'
      vars: { 'groupBy': "{{ params.groupBy }}", 'filters': "{{ params.filters }}", 'partitionByDate': "{{ params.partitionByDate }}",
              'startPeriod': "{{ params.startPeriod }}", 'endPeriod': "{{ params.endPeriod }}" }
      trigger_rule: 'all_done'
      dependencies: [ compute_customer_retention_rate ]
    check_customer_churn_rate:
      operator: airflow.providers.snowflake.operators.snowflake.SnowflakeCheckOperator
      sql: |
        SELECT NOT EXISTS (
          SELECT *
          FROM ANALYTICS.ANALYTICS_ENGINEERING_DATA_PIPELINE.KPI_CUSTOMER_CHURN_RATE
          WHERE CUSTOMER_CHURN_RATE > 20 );
      dependencies: [ compute_customer_churn_rate ]
